""""""""""""""""""
"
" Tags:
"   #PluginManager
"   #General
"   #VimUserInterface
"   #ColorScheme
"   #FilesBackupUndo
"   #TextTabIndent
"   #VisualSearch
"   #MovingTabsWindowsBuffers
"   #StatuslineTabline
"   #AutoCmd
"   #Misc
"   #PluginConfig
"   ##syntastic
"   ##vim-airline
"   #Functions
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" #PluginManager
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'    "Plugin Manager

" Plugins - General
Plugin 'tpope/vim-fugitive'    "Git integration
Plugin 'scrooloose/syntastic'    "Syntax check
Plugin 'bling/vim-airline'    "Vim status line

" Plugins - Python

" Plugins - Color Schemes
Plugin 'tomasr/molokai'
Plugin 'vim-scripts/peaksea'

call vundle#end()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" #General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=700

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" Set Vim Color Mode
set t_Co=256

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" #VimUserInterface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn on the WiLd menu
set wildmenu

" Do not show Vim mode in command bar
set noshowmode

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Show line numbers
set number


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" #ColorScheme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

colorscheme desert "desert, molokai, peaksea

set background=dark "dark, light


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" #FilesBackupUndo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
"set nobackup
"set nowb
"set noswapfile

" Persistent undi file
set undofile

" Undo file directory
set undodir=~/.vim/undodir

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => TextTabIndent
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs.
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines


""""""""""""""""""""""""""""""
" #VisualSearch
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" Disable highlight when <leader><cr> is pressed
map <leader>kk :noh<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" #MovingTabsWindowsBuffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk


""""""""""""""""""""""""""""""
" #StatuslineTabline
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" #AutoCmd
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""reload vimrc on save
autocmd! bufwritepost vimrc source %

""delete trailing spaces on save
autocmd BufWrite * :call DeleteTrailingWS()

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" #Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

""save file even if opened RO
cnoremap sudow w !sudo tee % >/dev/null

"Switch between absolut and relativ line number
noremap <silent><leader>n :set rnu! rnu? <cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" #PluginConfig
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ##syntastic
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"

" ##vim-airline
let g:airline#extensions#whitespace#enabled = 0
let g:airline_theme='durant'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" #Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Delete trailing white space on save, useful for Python.
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

